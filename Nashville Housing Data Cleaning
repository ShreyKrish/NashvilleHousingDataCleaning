Select *
FROM [Nashville Housing Data]

-- Cleaning Data

SELECT SaleDate, CONVERT(Date, SaleDate)
From PortfolioProject..[Nashville Housing Data]

-- Making sure the dates in the data set are of the Date type

UPDATE [Nashville Housing Data]
SET SaleDate = CONVERT(Date, SaleDate)

-- Creating a new column to store the converted sale dates after they are changed to the Date type

ALTER TABLE [Nashville Housing Data]
ADD ConvertedSaleDate date;

UPDATE [Nashville Housing Data]
SET ConvertedSaleDate = CONVERT(Date, SaleDate)

-- Populating Property Address

SELECT *
FROM [Nashville Housing Data]
-- WHERE PropertyAddress IS NULL
ORDER BY ParcelID

SELECT a.ParcelID, a.PropertyAddress,b.ParcelID,b.PropertyAddress, ISNULL(a.PropertyAddress, b.PropertyAddress)
FROM [Nashville Housing Data] a
JOIN [Nashville Housing Data] b
ON a.ParcelID = b.ParcelID
AND a.UniqueID <> b.UniqueID
WHERE a.PropertyAddress is NULL

UPDATE a
SET PropertyAddress = ISNULL(a.PropertyAddress, b.PropertyAddress)
FROM [Nashville Housing Data] a
JOIN [Nashville Housing Data] b
ON a.ParcelID = b.ParcelID
AND a.UniqueID <> b.UniqueID
WHERE a.PropertyAddress is NULL

-- Breaking down address into Individual Columns ie  city, Address

SELECT PropertyAddress
FROM [Nashville Housing Data]
-- WHERE PropertyAddress IS NULL
-- ORDER BY ParcelID

Select SUBSTRING(PropertyAddress,1, CharIndex(',', PropertyAddress) - 1) AS Address
,SUBSTRING(PropertyAddress, CharIndex(',', PropertyAddress) + 1 , Len(PropertyAddress)) AS City
FROM [Nashville Housing Data]


ALTER TABLE [Nashville Housing Data]
ADD PropertySplitAddress nvarchar(255);

UPDATE [Nashville Housing Data]
SET PropertySplitAddress = SUBSTRING(PropertyAddress,1, CharIndex(',', PropertyAddress) - 1)


ALTER TABLE [Nashville Housing Data]
ADD PropertySplitCity nvarchar(255);

UPDATE [Nashville Housing Data]
SET PropertySplitCity = SUBSTRING(PropertyAddress, CharIndex(',', PropertyAddress) + 1 , Len(PropertyAddress))

-- Cleaning owner address

Select OwnerAddress
FROM [Nashville Housing Data]

Select 
    PARSENAME(Replace(OwnerAddress,',','.'),3),
    PARSENAME(Replace(OwnerAddress,',','.'),2),
    PARSENAME(Replace(OwnerAddress,',','.'),1)
From [Nashville Housing Data]


ALTER TABLE [Nashville Housing Data]
ADD OwnerSplitAddress nvarchar(255);

UPDATE [Nashville Housing Data]
SET OwnerSplitAddress = PARSENAME(Replace(OwnerAddress,',','.'),3)

ALTER TABLE [Nashville Housing Data]
ADD OwnerSplitCity nvarchar(255);

UPDATE [Nashville Housing Data]
SET OwnerSplitCity = PARSENAME(Replace(OwnerAddress,',','.'),2)

ALTER TABLE [Nashville Housing Data]
ADD OwnerSplitState nvarchar(255);

UPDATE [Nashville Housing Data]
SET OwnerSplitState = PARSENAME(Replace(OwnerAddress,',','.'),1)

Select *
FROM [Nashville Housing Data]

-- Change SoldAsVacant to only have Yes and No instead of Y and N

SELECT Distinct(SoldAsVacant), Count(SoldAsVacant)
FROM [Nashville Housing Data]
Group By SoldAsVacant
ORDER BY 2

SELECT 
    SoldAsVacant, 
    Case WHEN SoldAsVacant = 'Y' THEN REPLACE(SoldAsVacant,'Y','Yes')
    WHEN SoldAsVacant = 'N' THEN REPLACE(SoldAsVacant,'N','No')
    ELSE SoldAsVacant
    END
FROM [Nashville Housing Data]

Update [Nashville Housing Data]
    SET 
        SoldAsVacant = Case WHEN SoldAsVacant = 'Y' THEN REPLACE(SoldAsVacant,'Y','Yes')
        WHEN SoldAsVacant = 'N' THEN REPLACE(SoldAsVacant,'N','No')
        ELSE SoldAsVacant
        END

-- Remove Dupes
WITH RowNumCTE AS(
Select *,
ROW_NUMBER()OVER(
    PARTITION By ParcelID, PropertyAddress, SaleDate, SalePrice, LegalReference 
    ORDER BY
        UniqueID
)row_num
FROM [Nashville Housing Data]
-- While row_num > 1
)
DELETE
FROM RowNumCTE
WHERE row_num > 1
-- ORDER BY PropertyAddress

-- Deleting unused columns

SELECT *
FROM [Nashville Housing Data]

Alter Table [Nashville Housing Data]
DROP COLUMN OwnerAddress, TaxDistrict, PropertyAddress, SaleDate
 
 